Consider the template of the "Grid" class, which models a two-dimensional grid of arbitrary objects that allow construction by copying (copy-constructible) and copying assignment (copy-assignable):

template <typename T>
class Grid final {
public:
	using valuetype = T;
	using size_type = unsigned;
private:
	T * const data;
	size_type const y_size, x_size;

	Grid(T *data, size_type y_size, size_type x_size):
		data(data), y_size(y_size), x_size(x_size){ }

	Grid(Grid<T> const &) = delete;
	Grid(Grid<T>&&) = delete;
	Grid<T>& operator=(Grid<T>&) = delete;
	Grid<T>& operator=(Grid<T>&&) = delete;

	T operator()(size_type y_idx, size_type x_idx) const {
		return data[y_idx * x_size + x_idx];
	}

	T& operator()(size_type y_idx, size_type x_idx) {
		return data[y_idx * x_size + x_idx];
	}

	Grid<T>& operator=(T const &t) {
		for (
			auto it = data, end = data + x_size * y_size;
			it != end; ++it
		) *it = t ;
	return *this;
	}

	size_type get_y_size() const { return y_size; }
	size_type get_x_size() const { return x_size; }
};


In its current form, the class does not manage the memory resource on its own. Memory is allocated by an external code and must be freed by an external code.


Modify the "Grid" class so that it can independently manage its own memory resource, namely: implement the necessary methods according to the "rule of five". Add the following constructors to the class template:

	1. The Grid constructor(T const &t) with one parameter for implicit type 	conversion (from T to Grid<T>) creates a new
	1*1 grid with a single element - a copy of t;

	2. constructor with two Grid parameters(size_type y_size, size_type
	x_size) creates a grid of size y_size*x_size filled with elements of type T 	created by the default constructor (default initialized);

	3. constructor with three Grid parameters(size_type y_size, size_type
	x_size, T const &t) creates a grid of size x_size*y_size filled with copies 	of the object t;

Note that the grid should work successfully with objects that do not have a constructor without parameters. In this case, we expect that the code using our class (client code) will call constructor number 3.
____________________________________________________________________________
Indexing Operator

Add an indexing operator to the grid class in such a way that when accessing the grid using the double use of the square brackets operator, we can get the element stored in the grid. Moreover, the following code must be executed successfully:

#include <cassert>
int main() { 
	Grid<float> g(3, 2, 0.0f); 
	assert (3 == g.get_y_size()); 
	assert (2 == g.get_x_size());

	using gsize_t = Grid <int>::size_type;

	for (gsize_t y_idx = 0; y_idx != g.get_y_size(); ++y_idx)
		for (gsize_t x_idx = 0; x_idx != g.get_x_size(); ++x_idx)
			assert (0.0f = g[y_idx][x_idx]); 

	for (gsize_t y_idx = 0; y_idx != g.get_y_size(); ++y_idx) 
		for (gsize_t x_idx = 0; x_idx != g.get_x_size(); ++x_idx)
			g[y_idx][x_idx] = 1.0f;

	for (gsize_t y_idx = 0; y_idx != g.get_y_size(); ++y_idx) 
		for (gsize_t x_idx = 0; x_idx != g.get_x_size(); ++x_idx) 
			assert (1.0f g(y_idx, x_idx));
	return 0;
}
____________________________________________________________________________
Multidimensional grids

With the development of the system, it became necessary to operate not only two-dimensional, but also grids of higher dimensions. Implement a template class for working with grids of arbitrary dimensions. The class template should depend on two parameters: the type of stored elements and the dimension of the grid. The stored elements are "copy-constructible" and "copy-assignable". The following code example should work successfully:

Grid<float,3> const g3(2, 3, 4, 1.0f);
assert (1.0f == g3(1, 1, 1));

Grid<float,2> g2(2, 5, 2.0f);
assert (2.0f == g2(1, 1));

g2 = g3[1];
assert (1.0f == g2(1, 1));

Note. As in the previous tasks, the parenthesis operator
takes exactly the number of arguments, what is the dimension of the grid.
The indexing operator (square brackets) returns a reference or a copy (depending on the constancy) of a grid of smaller dimension.
The indexing operator for a grid of dimension 1 (line) returns a reference or a copy of the stored element. The elements stored in the grid must allow construction by copying and assignment by copying, but for the grid itself, movement must also be allowed.
